{
  "name": "Mgfinal",
  "tagline": "基于mgwork（servlet3.0多实例非单例）做mvc框架，mybatis做orm框架，mgioc做单例容器的mgfinal框架，致力于打造实用的java后台底层。 适用于中小型应用，及研究框架底层学习爱好者",
  "body": "# mgfinal\r\n\r\n\t基于mgwork（servlet3.0多实例非单例）做mvc框架，\r\n\tmybatis做orm框架，\r\n\tmgioc做单例容器的mgfinal框架，\r\n\tmgutil做日志及常用工具方法管理，\r\n\t致力于打造实用的java后台底层。<br/>\r\n\t适用于中小型应用，及研究框架底层学习爱好者。\r\n\r\n##mgfinal框架源码目录\r\n![](./doc/img/mgfinal.png)\r\n\r\n##相关包\r\n<span style=\"text-decoration: line-through;\">(mgwork-ioc-2.0.jar mgwork-ioc框架集合（mvc + ioc） ----将源码移动到mgfinal中管理）</span>\r\n\r\n\t\r\n\t\t--fastjson.jar \t\t\tjson解析包\r\n\t\t--freemarker.jar \t\t\t视图包，支持freemarker目前。\r\n\t\t--jedis.jar\t\t\t\t使用redis db0来做ioc容器。\r\n\tmgutil-1.0.jar\t\t\t\t通用工具类模块，包含扫描包，proputil,log4j日志器\r\n\t\t--log4j.jar\t\t\t\tlog4j日志\r\n\tmybatis-xx.jar \t   \t\t\tmybatis框架(orm)\r\n\t\t--jsqlparser.jar \t\r\n\t\t--pagehelper.jar \t\t\tmybatis分页插件\r\n\t\t--mybatisext.jar\t\t\tmybatis的扩展工具，用来完成对象CRUD操作\r\n\t常用数据源\r\n\t\t--c3p0 \r\n\t\t\t--c3p0-0.9.5.1.jar\t\tc3p0数据源依赖包\r\n\t\t\t--mchange-commons-java.jar\r\n\t\t--druid\r\n\t\t\t--druid-1.0.5.jar\t\tdruid数据源依赖包\r\n\tmybatis-redis.jar\t\t\t\tmybatis的二级查询缓存（可选）\r\n\t\t--commons-pool2-.jar\t\t依赖pool2jar\r\n\t\t--jedis.jar\t\t\t\tjava操作redis的客户端包\r\n\t\r\n##mgfinal-1.0版本\r\n\t2016-5-13 1:25,生成mgfinal的1.0版本。\r\n\t特性：\r\n\t\t1.点对点servlet3.0高速mvc控制跳转。\r\n\t\t2.基于redis为容器的@ToBean,@UseBean高速ioc依赖注入。\r\n\t\t3.支持jsp,html,freemarker的java视图。（后续可以添加更多支持）\r\n\t\t4.集成mybatis的动态sql,通用orm。\r\n\t\t5.集成mybatis-ext的简易对象CURD。\r\n\t\t6.集成mybatis-redis的mybatis二级查询缓存。\r\n\t\t7.支持流行数据源druid,c3p0,及mybatis自带数据源。\r\n\r\n##关于作者\r\n一个喜爱代码的狂热工作者，常用名梦网，梦来梦往，mg0324等。<br/>\r\nQQ:1092017732<br/>\r\ngithub:https://github.com/mg0324<br/>\r\ngitoschina:https://git.oschina.net/mgang<br/>\r\n\r\n如果觉得不错的话，别忘了给个star咯。thanks.<br/>\r\n\r\n##项目初探\r\n###2016-5-11 demo 图\r\n![](./doc/img/crud.png)\r\n\r\n###2016-5-13 pagehelper demo图\r\n![](./doc/img/pagehelper.png)\r\n\r\n\r\n##更新日志\r\n###2016-5-3\r\n1.继承mgwork-2.0 和 mybatis 3.* 到mgfinal框架中。<br/>\r\n2.搭建mybatis底层，初步增加丰富的查询封装。\r\n(selectOne)，(selectList)，(selectMap)，(selectListMap)，(selectForInt)，(selectForString)等<br/>\r\n3.集成PageHelper来实现mybatis分页，新增分页案例及方法(selectPage).<br/>\r\n\r\n###2016-5-4\r\n1.整合mgwork-ioc框架，测试通过。<br/>\r\n2.添加2个方法executeUpdate和executeQuery 通用的crud方法。<br/>\r\n3.正在想办法实现事务控制！\r\n\r\n###2016-5-10\r\n1.完成事务控制，找到之前的原因（mysql的配置my.ini，未使用innodb的引擎，导致不支持事务。）找到原因后，事务支持成功。<br/>\r\n\r\n\t//开启事务\r\n\tthis.demoDao.start();\r\n\t//操作1\r\n\tthis.demoDao.ddlTx(\"com.mgfinal.vo.Demo.addDemo\", p);\r\n\t//操作2\r\n\tthis.demoDao.ddlTx(\"com.mgfinal.vo.Demo.addDemo\", p);\r\n\t//提交事务\r\n\tthis.demoDao.end();\r\n\r\n2.start,end的事务，放到master主分支中。另外还有一个基于SqlHelper先获取sql,然后conn来commit,rollback的事务支持提交到了v0.1分支。<br/>\r\n3.修改方法名称 executeUpdate -> ddl , executeQuery -> query , executeUpdateWithTx -> ddlTx，只要是简单明了。<br/>\r\n4.添加数据源支持常用数据源支持driud,c3p0等。<br/>\r\nc3p0:<br/>\r\n①添加jar包支持c3p0-0.9.5.1.jar和mchange-commons-java-0.2.10.jar<br/>\r\n②mybatis.xml配置文件中，配置数据源如下\r\n\r\n\t<dataSource type=\"com.mgfinal.core.mybatis.ds.C3P0DataSourceFactory\">\r\n        <property name=\"driverClass\" value=\"${driver}\" />\r\n        <property name=\"jdbcUrl\" value=\"${url}\" />\r\n        <property name=\"user\" value=\"${username}\" />\r\n        <property name=\"password\" value=\"${password}\" />\r\n        <property name=\"idleConnectionTestPeriod\" value=\"60\" />\r\n        <property name=\"maxPoolSize\" value=\"20\" />\r\n        <property name=\"maxIdleTime\" value=\"600\" />\r\n        <property name=\"preferredTestQuery\" value=\"SELECT 1\" />\r\n    </dataSource>\r\ndriud:<br/>\r\n①添加jar包支持druid-1.0.5.jar<br/>\r\n②mybatis.xml配置文件中，配置数据源如下\r\n\r\n\t<!-- druid数据源 -->\r\n    <dataSource type=\"com.mgfinal.core.mybatis.ds.DruidDataSourceFactory\">\r\n    \t<!-- 基本属性 url、user、password -->  \r\n    \t<property name=\"driver\" value=\"${driver}\" />\r\n\t    <property name=\"url\" value=\"${url}\" />  \r\n\t    <property name=\"username\" value=\"${username}\" />  \r\n\t    <property name=\"password\" value=\"${password}\" />  \r\n\t    <!-- 配置初始化大小、最小、最大 -->  \r\n\t    <property name=\"initialSize\" value=\"1\" />  \r\n\t    <property name=\"minIdle\" value=\"1\" />   \r\n\t    <property name=\"maxActive\" value=\"20\" />  \r\n\t    <!-- 配置获取连接等待超时的时间 -->  \r\n\t    <property name=\"maxWait\" value=\"60000\" />  \r\n\t    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  \r\n\t    <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" />  \r\n\t    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  \r\n\t    <property name=\"minEvictableIdleTimeMillis\" value=\"300000\" />  \r\n\t    <property name=\"validationQuery\" value=\"SELECT 'x'\" />  \r\n\t    <property name=\"testWhileIdle\" value=\"true\" />  \r\n\t    <property name=\"testOnBorrow\" value=\"false\" />  \r\n\t    <property name=\"testOnReturn\" value=\"false\" />  \r\n\t    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  \r\n\t    <property name=\"poolPreparedStatements\" value=\"true\" />  \r\n\t    <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\" />  \r\n    </dataSource>\r\n5.升级mgwork-ioc-1.2.jar，将日志常用操作丢给mgutil来管理。<br/>\r\n###2016-5-11\r\n1.集成mybatisext来完成对象CRUD操作的通用方法实现，包括(save,delete,update,one,list,page,count等);<br/>\r\n\r\n###2016-5-13\r\n1.集成mgwork-ioc-2.0.jar，使用redis来做ioc容器，默认使用的是redis的0数据库。\r\n(请升级mgwork-ioc-2.0.jar，欢迎到http://git.oschina.net/mgang/mgwork下载)<br/>\r\n\t\r\n\t注意点：1.redis存储对象，需要改对象实现Serializable序列化接口。\r\n\t\t\t所以service抽象了一层BaseService,目前用做序列化实现。\r\n\t\t\tdao的序列化交给了baseDaoImpl来实现。\r\n\t\t\tvo,bean的部分，就需要自己手动加上了。\r\n\t\t  2.在mgwork.properties中加上配置ioc容器的redis服务。\r\n\t\t  \t#redis服务主机\r\n\t\t\tmg.ioc.redis.host = localhost\r\n\t\t\t#redis服务端口\r\n\t\t\tmg.ioc.redis.port = 6379\r\n\t\t\t\r\n2.使用mybatis-redis.jar工具包，来做mybatis查询缓存，提供查询响应效率。<br/>\t\r\n\t\r\n\t注意点：1.加入mybatis-redis-1.0.0-beta2.jar包。\r\n\t\t  2.在要使用查询缓存的mapper中首行加上配置。\r\n\t\t  \t<!-- redis缓存 -->\r\n\t\t\t<cache type=\"org.mybatis.caches.redis.RedisCache\" />\r\n\t\t  3.可以开启mybatis中的自身缓存（一级），redis就算做2级缓存了。在mybatis.xml主配置文件中\r\n\t\t  加上settings节点如下：\r\n\t\t  \t<settings>\r\n\t\t\t\t<!-- 这个配置使全局的映射器启用或禁用缓存 -->\r\n\t\t\t\t<setting name=\"cacheEnabled\" value=\"true\" />\r\n\t\t\t\t<!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->\r\n\t\t\t\t<setting name=\"multipleResultSetsEnabled\" value=\"true\" />\r\n\t\t\t\t<!-- 配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用预处理语句。BATCH 执行器重用语句和批量更新 -->\r\n\t\t\t\t<setting name=\"defaultExecutorType\" value=\"REUSE\" />\r\n\t\t\t\t<!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 -->\r\n\t\t\t\t<setting name=\"lazyLoadingEnabled\" value=\"false\" />\r\n\t\t\t\t<setting name=\"aggressiveLazyLoading\" value=\"true\" />\r\n\t\t\t\t<!-- <setting name=\"enhancementEnabled\" value=\"true\"/> -->\r\n\t\t\t\t<!-- 设置超时时间，它决定驱动等待一个数据库响应的时间。 -->\r\n\t\t\t\t<setting name=\"defaultStatementTimeout\" value=\"25000\" />\r\n\t\t\t</settings>\r\n3.加入mybatis-redis要的配置文件，配置查询缓存连接的redis服务，如下：\r\n\t\r\n\t#使用redis的第2个数据库来做mybatis查询缓存\r\n\thost=localhost\r\n\tport=6379\r\n\tconnectionTimeout=5000\r\n\tsoTimeout=5000\r\n\tpassword=\r\n\t#选择数据库，0被mgwork-ioc占用\r\n\tdatabase=1\r\n\tclientName=\r\n4.使用redis图形客户端查看redis数据库中的key情况：\r\n![](./doc/img/mgfinal-redis-orm.png)\r\n\r\n5.生成mgfinal-1.0版本，导出jar包为mgfinal-1.0.jar。\r\n\r\n6.加入mgwork ioc等源码，让mgfinal管理，并调整目录。更改web.xml中mgfinal ioc监听启动配置。\r\n\r\n\t<listener>\r\n\t\t<listener-class>com.mgfinal.core.ioc.context.IocListener</listener-class>\r\n\t</listener>\r\n\r\n7.后续会编写使用手册，有需要，可以收藏，等待手册。\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}